@charset "UTF-8";

// Fonts
@mixin base-font {
  font-family: "Helvetica Neue LT W01_55 Roman", "Hiragino Kaku Gothic ProN", "ヒラギノ角ゴ ProN W3", "メイリオ", Arial, Meiryo, Roboto, Verdana, sans-serif;
}

// site layout size
@mixin la-size {
  width : 1160px;
  min-width : 1160px;
  box-sizing: border-box;
  margin: 0 auto;
  @include mq(SP) {
    width: 100%;
    min-width: 100%;
    padding-right: 15px;
    padding-left: 15px;
  }
}

// Image path
// $img-path: '../img/';
$img-path: '/wp/wp-content/themes/mattel/assets/img/';
$fonts-path: '/wp/wp-content/themes/mattel/assets/libs/fonts/';

//colors
$red: #ee3427;
$gray: #f2f2f2;

// Hover option
$opacity: .8;

// Breakpoints
$SP:  544px;
$TB:  768px;
$MD:  1000px;
$PC:  1200px;

// media queries
@mixin mq($canvas) {
  @if $canvas == SP {
   @media only screen and (max-width: $SP) { @content; }
  }
  @else if $canvas == TB {
   @media only screen and (max-width: $TB) and (min-width: $MSP) { @content; }
  }
  @else if $canvas == MD {
   @media only screen and (max-width: $MD) and (max-width: $PC) { @content; }
  }
  @else if $canvas == PC {
   @media only screen and (min-width: $PC) { @content; }
  }
}

// Font optimization
@mixin font-smooth {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
}

// Clear Fix
@mixin cf {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

// Margin Center
@mixin m-center {
  margin-right: auto;
  margin-left: auto;
}

// Base Width for Web Site
@mixin base-width {
  width : 1000px;
  box-sizing: border-box;
  margin: 0 auto;
  @include mq(TB) {
    width: 100%;
  }
}

// Hide Text ...Hide text to show a background image.
@mixin text-to-img($height: null) {
  overflow: hidden;
  text-indent: 101%;
  white-space: nowrap;
}

// px to rem
$rem-baseline: 16px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;

@function rem-separator($list, $separator: false) {
  @if $separator == "comma" or $separator == "space" {
    @return append($list, null, $separator);
  }

  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline + 0px, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / $rem-baseline + 0rem, $separator);
    } @else if type-of($value) == "list" {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

// px to em
$browser-context: 16; // Default

@function em($pixels, $context: $browser-context) {
  @return #{$pixels/$context}em;
}